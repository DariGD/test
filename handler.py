from aiogram import Router, types
from aiogram.filters import Command
from keyboard import main_keyboard
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from functions.utilits import log_workout, get_food_info, check_progress,send_progress_charts, calculate_needs, log_water
from users import user_profiles
from config import OPENWEATHER_API_KEY
import requests
from aiogram.types import Message
import requests
from aiogram.filters import Command
from aiogram import types

router = Router()


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water  - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã\n"
        "/log_food  - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    )
    await message.reply(help_text, reply_markup=main_keyboard)

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    start_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    await message.reply(start_text, reply_markup=main_keyboard)

@router.message(Command('set_profile'))
async def set_profile(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    user_profiles[message.from_user.id] = {}
    user_profiles[message.from_user.id]['state'] = 'weight'

@router.message(Command('log_water'))
async def log_water_handler(message: Message):
    user_id = message.from_user.id
    try:
        command_args = message.text.split()
        if len(command_args) < 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`.")
            return

        amount = float(command_args[1])
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ–¥—ã
        remaining = log_water(user_id, amount)  
        await message.reply(
            f"–í—ã –≤—ã–ø–∏–ª–∏ {amount} –ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {remaining:.2f} –ª."
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/log_water 1.5`.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"–û—à–∏–±–∫–∞ –≤ log_water_handler: {e}")

@router.message(Command('log_food'))
async def log_food_handler(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_profiles:
        user_profiles[user_id] = {} 

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    user_profiles[user_id]['state'] = 'waiting_for_food_name'

@router.message(lambda message: user_profiles.get(message.from_user.id, {}).get('state') == 'waiting_for_food_name')
async def handle_food_name(message: Message):
    user_id = message.from_user.id
    food_name = message.text.strip()
    food_data = get_food_info(food_name)

    if food_data:
        calories_per_100g = food_data['calories']
        user_profiles[user_id]['food_name'] = food_data['name']
        user_profiles[user_id]['calories_per_100g'] = calories_per_100g
        user_profiles[user_id]['state'] = 'waiting_for_food_amount'

        await message.reply(
            f"{food_data['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
    else:
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º–æ–≤
@router.message(lambda message: user_profiles.get(message.from_user.id, {}).get('state') == 'waiting_for_food_amount')
async def handle_food_amount(message: Message):
    user_id = message.from_user.id

    try:
        grams = float(message.text.strip())
        calories_per_100g = user_profiles[user_id].get('calories_per_100g', 0)
        total_calories = (grams / 100) * calories_per_100g

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
        if 'calories_consumed' not in user_profiles[user_id]:
            user_profiles[user_id]['calories_consumed'] = 0
        user_profiles[user_id]['calories_consumed'] += total_calories

        await message.reply(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.2f} –∫–∫–∞–ª ({grams} –≥ {user_profiles[user_id]['food_name']})."
        )
        user_profiles[user_id]['state'] = None
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")


@router.message(Command('log_workout'))
async def log_workout_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_profiles:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    try:
        
        args = message.text.split()
        workout_type = args[1]
        duration = int(args[2])  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö

        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        calories_burned, water_additional = log_workout(user_id, workout_type, duration)

        await message.reply(
            f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {workout_type} –Ω–∞ {duration} –º–∏–Ω—É—Ç.\n"
            f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.0f} –∫–∫–∞–ª.\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã: {water_additional:.2f} –ª."
        )
    except IndexError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä:\n"
                            "/log_workout run 30")
    except ValueError:
        await message.reply("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
                            "/log_workout run 30")


@router.message(Command('check_progress'))
async def check_progress_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_profiles:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    water_consumed, water_remaining, calories_consumed, calories_burned, calorie_remaining = check_progress(user_id)

    await message.reply(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {water_consumed:.2f} –ª –∏–∑ {user_profiles[user_id]['water_needs']:.2f} –ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_remaining:.2f} –ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_consumed:.0f} –∫–∫–∞–ª –∏–∑ {user_profiles[user_id]['calorie_needs']:.0f} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {calories_burned:.0f} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_remaining:.0f} –∫–∫–∞–ª."
    )

    await send_progress_charts(message, water_consumed, water_remaining, calories_consumed, calories_burned, user_profiles[user_id]['water_needs'], user_profiles[user_id]['calorie_needs'])


@router.message()
async def handle_message(message: Message):
    user_id = message.from_user.id

    if user_id in user_profiles and 'state' in user_profiles[user_id]:
        state = user_profiles[user_id]['state']

        if state == 'weight':
            try:
                user_profiles[user_id]['weight'] = float(message.text)
                user_profiles[user_id]['state'] = 'height'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif state == 'height':
            try:
                user_profiles[user_id]['height'] = float(message.text)
                user_profiles[user_id]['state'] = 'age'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):")
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif state == 'age':
            try:
                user_profiles[user_id]['age'] = int(message.text)
                user_profiles[user_id]['state'] = 'activity'
                await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –≤—ã —É–¥–µ–ª—è–µ—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?:")
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif state == 'activity':
            try:
                user_profiles[user_id]['activity'] = int(message.text)
                user_profiles[user_id]['state'] = 'city'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è —É—á—ë—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:")
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        elif state == 'city':
            city = message.text

            try:
                response = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric")
                response.raise_for_status()
                weather_data = response.json()
                temperature = weather_data['main']['temp']

                user_profiles[user_id]['city'] = city
                user_profiles[user_id]['temperature'] = temperature

                weight = user_profiles[user_id]['weight']
                height = user_profiles[user_id]['height']
                age = user_profiles[user_id]['age']
                activity = user_profiles[user_id]['activity']

                water_needs, calorie_needs = calculate_needs(weight, height, age, activity, temperature)

                user_profiles[user_id]['water_needs'] = water_needs
                user_profiles[user_id]['calorie_needs'] = calorie_needs

                await message.reply(
                    f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! \n"
                    f"–í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
                    f"- –í–æ–¥–∞: {water_needs:.2f} –ª\n"
                    f"- –ö–∞–ª–æ—Ä–∏–∏: {calorie_needs:.0f} –∫–∫–∞–ª"
                )
                user_profiles[user_id]['state'] = None

            except requests.RequestException:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
